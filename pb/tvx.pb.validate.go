// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/tvx.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on SetStringRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStringRequestMultiError, or nil if none found.
func (m *SetStringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return SetStringRequestMultiError(errors)
	}

	return nil
}

// SetStringRequestMultiError is an error wrapping multiple validation errors
// returned by SetStringRequest.ValidateAll() if the designated constraints
// aren't met.
type SetStringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStringRequestMultiError) AllErrors() []error { return m }

// SetStringRequestValidationError is the validation error returned by
// SetStringRequest.Validate if the designated constraints aren't met.
type SetStringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStringRequestValidationError) ErrorName() string { return "SetStringRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetStringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStringRequestValidationError{}

// Validate checks the field values on SetStringResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStringResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStringResponseMultiError, or nil if none found.
func (m *SetStringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetStringResponseMultiError(errors)
	}

	return nil
}

// SetStringResponseMultiError is an error wrapping multiple validation errors
// returned by SetStringResponse.ValidateAll() if the designated constraints
// aren't met.
type SetStringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStringResponseMultiError) AllErrors() []error { return m }

// SetStringResponseValidationError is the validation error returned by
// SetStringResponse.Validate if the designated constraints aren't met.
type SetStringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStringResponseValidationError) ErrorName() string {
	return "SetStringResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetStringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStringResponseValidationError{}

// Validate checks the field values on GetStringRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStringRequestMultiError, or nil if none found.
func (m *GetStringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetStringRequestMultiError(errors)
	}

	return nil
}

// GetStringRequestMultiError is an error wrapping multiple validation errors
// returned by GetStringRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStringRequestMultiError) AllErrors() []error { return m }

// GetStringRequestValidationError is the validation error returned by
// GetStringRequest.Validate if the designated constraints aren't met.
type GetStringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStringRequestValidationError) ErrorName() string { return "GetStringRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStringRequestValidationError{}

// Validate checks the field values on GetStringResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStringResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStringResponseMultiError, or nil if none found.
func (m *GetStringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetStringResponseMultiError(errors)
	}

	return nil
}

// GetStringResponseMultiError is an error wrapping multiple validation errors
// returned by GetStringResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStringResponseMultiError) AllErrors() []error { return m }

// GetStringResponseValidationError is the validation error returned by
// GetStringResponse.Validate if the designated constraints aren't met.
type GetStringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStringResponseValidationError) ErrorName() string {
	return "GetStringResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStringResponseValidationError{}

// Validate checks the field values on SetIntRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetIntRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetIntRequestMultiError, or
// nil if none found.
func (m *SetIntRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return SetIntRequestMultiError(errors)
	}

	return nil
}

// SetIntRequestMultiError is an error wrapping multiple validation errors
// returned by SetIntRequest.ValidateAll() if the designated constraints
// aren't met.
type SetIntRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntRequestMultiError) AllErrors() []error { return m }

// SetIntRequestValidationError is the validation error returned by
// SetIntRequest.Validate if the designated constraints aren't met.
type SetIntRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntRequestValidationError) ErrorName() string { return "SetIntRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetIntRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntRequestValidationError{}

// Validate checks the field values on SetIntResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetIntResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetIntResponseMultiError,
// or nil if none found.
func (m *SetIntResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetIntResponseMultiError(errors)
	}

	return nil
}

// SetIntResponseMultiError is an error wrapping multiple validation errors
// returned by SetIntResponse.ValidateAll() if the designated constraints
// aren't met.
type SetIntResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntResponseMultiError) AllErrors() []error { return m }

// SetIntResponseValidationError is the validation error returned by
// SetIntResponse.Validate if the designated constraints aren't met.
type SetIntResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntResponseValidationError) ErrorName() string { return "SetIntResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetIntResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntResponseValidationError{}

// Validate checks the field values on GetIntRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIntRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIntRequestMultiError, or
// nil if none found.
func (m *GetIntRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetIntRequestMultiError(errors)
	}

	return nil
}

// GetIntRequestMultiError is an error wrapping multiple validation errors
// returned by GetIntRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIntRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntRequestMultiError) AllErrors() []error { return m }

// GetIntRequestValidationError is the validation error returned by
// GetIntRequest.Validate if the designated constraints aren't met.
type GetIntRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntRequestValidationError) ErrorName() string { return "GetIntRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIntRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntRequestValidationError{}

// Validate checks the field values on GetIntResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIntResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIntResponseMultiError,
// or nil if none found.
func (m *GetIntResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetIntResponseMultiError(errors)
	}

	return nil
}

// GetIntResponseMultiError is an error wrapping multiple validation errors
// returned by GetIntResponse.ValidateAll() if the designated constraints
// aren't met.
type GetIntResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntResponseMultiError) AllErrors() []error { return m }

// GetIntResponseValidationError is the validation error returned by
// GetIntResponse.Validate if the designated constraints aren't met.
type GetIntResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntResponseValidationError) ErrorName() string { return "GetIntResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetIntResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntResponseValidationError{}

// Validate checks the field values on SetFloatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetFloatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFloatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFloatRequestMultiError, or nil if none found.
func (m *SetFloatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFloatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return SetFloatRequestMultiError(errors)
	}

	return nil
}

// SetFloatRequestMultiError is an error wrapping multiple validation errors
// returned by SetFloatRequest.ValidateAll() if the designated constraints
// aren't met.
type SetFloatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFloatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFloatRequestMultiError) AllErrors() []error { return m }

// SetFloatRequestValidationError is the validation error returned by
// SetFloatRequest.Validate if the designated constraints aren't met.
type SetFloatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFloatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFloatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFloatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFloatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFloatRequestValidationError) ErrorName() string { return "SetFloatRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetFloatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFloatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFloatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFloatRequestValidationError{}

// Validate checks the field values on SetFloatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetFloatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFloatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFloatResponseMultiError, or nil if none found.
func (m *SetFloatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFloatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetFloatResponseMultiError(errors)
	}

	return nil
}

// SetFloatResponseMultiError is an error wrapping multiple validation errors
// returned by SetFloatResponse.ValidateAll() if the designated constraints
// aren't met.
type SetFloatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFloatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFloatResponseMultiError) AllErrors() []error { return m }

// SetFloatResponseValidationError is the validation error returned by
// SetFloatResponse.Validate if the designated constraints aren't met.
type SetFloatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFloatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFloatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFloatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFloatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFloatResponseValidationError) ErrorName() string { return "SetFloatResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetFloatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFloatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFloatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFloatResponseValidationError{}

// Validate checks the field values on GetFloatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFloatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFloatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFloatRequestMultiError, or nil if none found.
func (m *GetFloatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFloatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetFloatRequestMultiError(errors)
	}

	return nil
}

// GetFloatRequestMultiError is an error wrapping multiple validation errors
// returned by GetFloatRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFloatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFloatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFloatRequestMultiError) AllErrors() []error { return m }

// GetFloatRequestValidationError is the validation error returned by
// GetFloatRequest.Validate if the designated constraints aren't met.
type GetFloatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFloatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFloatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFloatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFloatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFloatRequestValidationError) ErrorName() string { return "GetFloatRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFloatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFloatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFloatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFloatRequestValidationError{}

// Validate checks the field values on GetFloatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFloatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFloatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFloatResponseMultiError, or nil if none found.
func (m *GetFloatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFloatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetFloatResponseMultiError(errors)
	}

	return nil
}

// GetFloatResponseMultiError is an error wrapping multiple validation errors
// returned by GetFloatResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFloatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFloatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFloatResponseMultiError) AllErrors() []error { return m }

// GetFloatResponseValidationError is the validation error returned by
// GetFloatResponse.Validate if the designated constraints aren't met.
type GetFloatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFloatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFloatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFloatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFloatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFloatResponseValidationError) ErrorName() string { return "GetFloatResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFloatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFloatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFloatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFloatResponseValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentType

	// no validation rules for Price

	// no validation rules for IsConsumable

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on GetAvailableProductListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableProductListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableProductListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAvailableProductListRequestMultiError, or nil if none found.
func (m *GetAvailableProductListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableProductListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAvailableProductListRequestMultiError(errors)
	}

	return nil
}

// GetAvailableProductListRequestMultiError is an error wrapping multiple
// validation errors returned by GetAvailableProductListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAvailableProductListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableProductListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableProductListRequestMultiError) AllErrors() []error { return m }

// GetAvailableProductListRequestValidationError is the validation error
// returned by GetAvailableProductListRequest.Validate if the designated
// constraints aren't met.
type GetAvailableProductListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableProductListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableProductListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableProductListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableProductListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableProductListRequestValidationError) ErrorName() string {
	return "GetAvailableProductListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableProductListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableProductListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableProductListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableProductListRequestValidationError{}

// Validate checks the field values on GetAvailableProductListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableProductListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableProductListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAvailableProductListResponseMultiError, or nil if none found.
func (m *GetAvailableProductListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableProductListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvailableProductListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvailableProductListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvailableProductListResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAvailableProductListResponseMultiError(errors)
	}

	return nil
}

// GetAvailableProductListResponseMultiError is an error wrapping multiple
// validation errors returned by GetAvailableProductListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAvailableProductListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableProductListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableProductListResponseMultiError) AllErrors() []error { return m }

// GetAvailableProductListResponseValidationError is the validation error
// returned by GetAvailableProductListResponse.Validate if the designated
// constraints aren't met.
type GetAvailableProductListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableProductListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableProductListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableProductListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableProductListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableProductListResponseValidationError) ErrorName() string {
	return "GetAvailableProductListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableProductListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableProductListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableProductListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableProductListResponseValidationError{}

// Validate checks the field values on ConsumeProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumeProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeProductRequestMultiError, or nil if none found.
func (m *ConsumeProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ConsumeProductRequestMultiError(errors)
	}

	return nil
}

// ConsumeProductRequestMultiError is an error wrapping multiple validation
// errors returned by ConsumeProductRequest.ValidateAll() if the designated
// constraints aren't met.
type ConsumeProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeProductRequestMultiError) AllErrors() []error { return m }

// ConsumeProductRequestValidationError is the validation error returned by
// ConsumeProductRequest.Validate if the designated constraints aren't met.
type ConsumeProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeProductRequestValidationError) ErrorName() string {
	return "ConsumeProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumeProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeProductRequestValidationError{}

// Validate checks the field values on ConsumeProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumeProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeProductResponseMultiError, or nil if none found.
func (m *ConsumeProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConsumeProductResponseMultiError(errors)
	}

	return nil
}

// ConsumeProductResponseMultiError is an error wrapping multiple validation
// errors returned by ConsumeProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ConsumeProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeProductResponseMultiError) AllErrors() []error { return m }

// ConsumeProductResponseValidationError is the validation error returned by
// ConsumeProductResponse.Validate if the designated constraints aren't met.
type ConsumeProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeProductResponseValidationError) ErrorName() string {
	return "ConsumeProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumeProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeProductResponseValidationError{}

// Validate checks the field values on GetConsumedProductListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumedProductListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumedProductListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConsumedProductListRequestMultiError, or nil if none found.
func (m *GetConsumedProductListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumedProductListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConsumedProductListRequestMultiError(errors)
	}

	return nil
}

// GetConsumedProductListRequestMultiError is an error wrapping multiple
// validation errors returned by GetConsumedProductListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetConsumedProductListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumedProductListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumedProductListRequestMultiError) AllErrors() []error { return m }

// GetConsumedProductListRequestValidationError is the validation error
// returned by GetConsumedProductListRequest.Validate if the designated
// constraints aren't met.
type GetConsumedProductListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumedProductListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumedProductListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumedProductListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumedProductListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumedProductListRequestValidationError) ErrorName() string {
	return "GetConsumedProductListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumedProductListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumedProductListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumedProductListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumedProductListRequestValidationError{}

// Validate checks the field values on GetConsumedProductListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumedProductListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumedProductListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConsumedProductListResponseMultiError, or nil if none found.
func (m *GetConsumedProductListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumedProductListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumedProductListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumedProductListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumedProductListResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumedProductListResponseMultiError(errors)
	}

	return nil
}

// GetConsumedProductListResponseMultiError is an error wrapping multiple
// validation errors returned by GetConsumedProductListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetConsumedProductListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumedProductListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumedProductListResponseMultiError) AllErrors() []error { return m }

// GetConsumedProductListResponseValidationError is the validation error
// returned by GetConsumedProductListResponse.Validate if the designated
// constraints aren't met.
type GetConsumedProductListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumedProductListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumedProductListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumedProductListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumedProductListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumedProductListResponseValidationError) ErrorName() string {
	return "GetConsumedProductListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumedProductListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumedProductListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumedProductListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumedProductListResponseValidationError{}
