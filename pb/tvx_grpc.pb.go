// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/tvx.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClickerBackendClient is the client API for ClickerBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickerBackendClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*SetStringResponse, error)
	GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error)
	SetInt(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*SetIntResponse, error)
	GetInt(ctx context.Context, in *GetIntRequest, opts ...grpc.CallOption) (*GetIntResponse, error)
	SetFloat(ctx context.Context, in *SetFloatRequest, opts ...grpc.CallOption) (*SetFloatResponse, error)
	GetFloat(ctx context.Context, in *GetFloatRequest, opts ...grpc.CallOption) (*GetFloatResponse, error)
	GetAvailableProductList(ctx context.Context, in *GetAvailableProductListRequest, opts ...grpc.CallOption) (*GetAvailableProductListResponse, error)
	ConsumeProduct(ctx context.Context, in *ConsumeProductRequest, opts ...grpc.CallOption) (*ConsumeProductResponse, error)
	GetConsumedProductList(ctx context.Context, in *GetConsumedProductListRequest, opts ...grpc.CallOption) (*GetConsumedProductListResponse, error)
}

type clickerBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewClickerBackendClient(cc grpc.ClientConnInterface) ClickerBackendClient {
	return &clickerBackendClient{cc}
}

func (c *clickerBackendClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*SetStringResponse, error) {
	out := new(SetStringResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/SetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error) {
	out := new(GetStringResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/GetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) SetInt(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*SetIntResponse, error) {
	out := new(SetIntResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/SetInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) GetInt(ctx context.Context, in *GetIntRequest, opts ...grpc.CallOption) (*GetIntResponse, error) {
	out := new(GetIntResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/GetInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) SetFloat(ctx context.Context, in *SetFloatRequest, opts ...grpc.CallOption) (*SetFloatResponse, error) {
	out := new(SetFloatResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/SetFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) GetFloat(ctx context.Context, in *GetFloatRequest, opts ...grpc.CallOption) (*GetFloatResponse, error) {
	out := new(GetFloatResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/GetFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) GetAvailableProductList(ctx context.Context, in *GetAvailableProductListRequest, opts ...grpc.CallOption) (*GetAvailableProductListResponse, error) {
	out := new(GetAvailableProductListResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/GetAvailableProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) ConsumeProduct(ctx context.Context, in *ConsumeProductRequest, opts ...grpc.CallOption) (*ConsumeProductResponse, error) {
	out := new(ConsumeProductResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/ConsumeProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickerBackendClient) GetConsumedProductList(ctx context.Context, in *GetConsumedProductListRequest, opts ...grpc.CallOption) (*GetConsumedProductListResponse, error) {
	out := new(GetConsumedProductListResponse)
	err := c.cc.Invoke(ctx, "/tvx.ClickerBackend/GetConsumedProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClickerBackendServer is the server API for ClickerBackend service.
// All implementations must embed UnimplementedClickerBackendServer
// for forward compatibility
type ClickerBackendServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SetString(context.Context, *SetStringRequest) (*SetStringResponse, error)
	GetString(context.Context, *GetStringRequest) (*GetStringResponse, error)
	SetInt(context.Context, *SetIntRequest) (*SetIntResponse, error)
	GetInt(context.Context, *GetIntRequest) (*GetIntResponse, error)
	SetFloat(context.Context, *SetFloatRequest) (*SetFloatResponse, error)
	GetFloat(context.Context, *GetFloatRequest) (*GetFloatResponse, error)
	GetAvailableProductList(context.Context, *GetAvailableProductListRequest) (*GetAvailableProductListResponse, error)
	ConsumeProduct(context.Context, *ConsumeProductRequest) (*ConsumeProductResponse, error)
	GetConsumedProductList(context.Context, *GetConsumedProductListRequest) (*GetConsumedProductListResponse, error)
	mustEmbedUnimplementedClickerBackendServer()
}

// UnimplementedClickerBackendServer must be embedded to have forward compatible implementations.
type UnimplementedClickerBackendServer struct {
}

func (UnimplementedClickerBackendServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedClickerBackendServer) SetString(context.Context, *SetStringRequest) (*SetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetString not implemented")
}
func (UnimplementedClickerBackendServer) GetString(context.Context, *GetStringRequest) (*GetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetString not implemented")
}
func (UnimplementedClickerBackendServer) SetInt(context.Context, *SetIntRequest) (*SetIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInt not implemented")
}
func (UnimplementedClickerBackendServer) GetInt(context.Context, *GetIntRequest) (*GetIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInt not implemented")
}
func (UnimplementedClickerBackendServer) SetFloat(context.Context, *SetFloatRequest) (*SetFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFloat not implemented")
}
func (UnimplementedClickerBackendServer) GetFloat(context.Context, *GetFloatRequest) (*GetFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFloat not implemented")
}
func (UnimplementedClickerBackendServer) GetAvailableProductList(context.Context, *GetAvailableProductListRequest) (*GetAvailableProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProductList not implemented")
}
func (UnimplementedClickerBackendServer) ConsumeProduct(context.Context, *ConsumeProductRequest) (*ConsumeProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeProduct not implemented")
}
func (UnimplementedClickerBackendServer) GetConsumedProductList(context.Context, *GetConsumedProductListRequest) (*GetConsumedProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumedProductList not implemented")
}
func (UnimplementedClickerBackendServer) mustEmbedUnimplementedClickerBackendServer() {}

// UnsafeClickerBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickerBackendServer will
// result in compilation errors.
type UnsafeClickerBackendServer interface {
	mustEmbedUnimplementedClickerBackendServer()
}

func RegisterClickerBackendServer(s grpc.ServiceRegistrar, srv ClickerBackendServer) {
	s.RegisterService(&ClickerBackend_ServiceDesc, srv)
}

func _ClickerBackend_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_SetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).SetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/SetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).SetString(ctx, req.(*SetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_GetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).GetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/GetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).GetString(ctx, req.(*GetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_SetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).SetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/SetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).SetInt(ctx, req.(*SetIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_GetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).GetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/GetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).GetInt(ctx, req.(*GetIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_SetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).SetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/SetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).SetFloat(ctx, req.(*SetFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_GetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).GetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/GetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).GetFloat(ctx, req.(*GetFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_GetAvailableProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).GetAvailableProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/GetAvailableProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).GetAvailableProductList(ctx, req.(*GetAvailableProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_ConsumeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).ConsumeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/ConsumeProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).ConsumeProduct(ctx, req.(*ConsumeProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickerBackend_GetConsumedProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumedProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickerBackendServer).GetConsumedProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tvx.ClickerBackend/GetConsumedProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickerBackendServer).GetConsumedProductList(ctx, req.(*GetConsumedProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClickerBackend_ServiceDesc is the grpc.ServiceDesc for ClickerBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickerBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tvx.ClickerBackend",
	HandlerType: (*ClickerBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ClickerBackend_Login_Handler,
		},
		{
			MethodName: "SetString",
			Handler:    _ClickerBackend_SetString_Handler,
		},
		{
			MethodName: "GetString",
			Handler:    _ClickerBackend_GetString_Handler,
		},
		{
			MethodName: "SetInt",
			Handler:    _ClickerBackend_SetInt_Handler,
		},
		{
			MethodName: "GetInt",
			Handler:    _ClickerBackend_GetInt_Handler,
		},
		{
			MethodName: "SetFloat",
			Handler:    _ClickerBackend_SetFloat_Handler,
		},
		{
			MethodName: "GetFloat",
			Handler:    _ClickerBackend_GetFloat_Handler,
		},
		{
			MethodName: "GetAvailableProductList",
			Handler:    _ClickerBackend_GetAvailableProductList_Handler,
		},
		{
			MethodName: "ConsumeProduct",
			Handler:    _ClickerBackend_ConsumeProduct_Handler,
		},
		{
			MethodName: "GetConsumedProductList",
			Handler:    _ClickerBackend_GetConsumedProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tvx.proto",
}
